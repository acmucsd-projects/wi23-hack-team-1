[{"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/index.js":"1","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/reportWebVitals.js":"2","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/App.js":"3","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/pages/RestaurantPage/index.jsx":"4","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/pages/ProfilePage/index.jsx":"5","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/components/Navbar/index.jsx":"6","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/components/PostImage/index.jsx":"7","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/components/StarRating/index.jsx":"8","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/api/API.js":"9","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/pages/SignupPage/index.jsx":"10","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/components/ProfileNavbar/index.jsx":"11","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/pages/Home/index.jsx":"12","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/pages/Login/index.jsx":"13","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/pages/Post/index.jsx":"14","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/components/PostCard/index.jsx":"15","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/components/Maps/index.jsx":"16"},{"size":720,"mtime":1680454444891,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1676071201541,"results":"19","hashOfConfig":"18"},{"size":946,"mtime":1692862444601,"results":"20","hashOfConfig":"18"},{"size":4055,"mtime":1692861022404,"results":"21","hashOfConfig":"18"},{"size":5602,"mtime":1692866359195,"results":"22","hashOfConfig":"18"},{"size":1603,"mtime":1692862417098,"results":"23","hashOfConfig":"18"},{"size":994,"mtime":1692861022402,"results":"24","hashOfConfig":"18"},{"size":988,"mtime":1692861022402,"results":"25","hashOfConfig":"18"},{"size":1206,"mtime":1692861022399,"results":"26","hashOfConfig":"18"},{"size":4455,"mtime":1692861022404,"results":"27","hashOfConfig":"18"},{"size":1088,"mtime":1692862419265,"results":"28","hashOfConfig":"18"},{"size":2347,"mtime":1692861022403,"results":"29","hashOfConfig":"18"},{"size":4552,"mtime":1692861022403,"results":"30","hashOfConfig":"18"},{"size":5463,"mtime":1692861022403,"results":"31","hashOfConfig":"18"},{"size":1223,"mtime":1692861022402,"results":"32","hashOfConfig":"18"},{"size":3405,"mtime":1692861022401,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"qxcax7",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/index.js",[],["70","71"],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/reportWebVitals.js",[],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/App.js",[],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/pages/RestaurantPage/index.jsx",[],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/pages/ProfilePage/index.jsx",["72","73"],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/components/Navbar/index.jsx",[],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/components/PostImage/index.jsx",[],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/components/StarRating/index.jsx",[],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/api/API.js",[],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/pages/SignupPage/index.jsx",[],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/components/ProfileNavbar/index.jsx",[],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/pages/Home/index.jsx",["74"],"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Navbar from \"components/Navbar\";\nimport Maps from \"components/Maps\";\nimport PostCard from \"components/PostCard\";\nimport API from 'api/API';\nimport \"./Home.css\";\nfunction Home() {\n    const user = localStorage.getItem('user');\n    const [posts, setPosts] = useState([]);\n    const [selected, setSelected] = useState(0);\n    const handlePostClick = (item) => {\n        setSelected(item + 1);\n    }\n    const navigate = useNavigate();\n    useEffect(() => {\n        const handlePostDashboard = async () => {\n            const all_posts = await API.getPosts();\n            for (let post of all_posts.data) {\n                if (post.username !== user) {\n                    const post_user = await API.getUser(post.username);\n                    const post_restaurant = await API.getRestaurant(post.restaurant);\n                    const post_info = {\n                        id: post._id,\n                        username: post_user.data.username,\n                        restaurant: post_restaurant.data.title,\n                        location: {\n                            lat: post_restaurant.data.location.latitude,\n                            lng: post_restaurant.data.location.longitude\n                        },\n                        image: post.image,\n                        postTitle: post.postTitle,\n                        review: post.review,\n                        stars: post.stars\n                    }\n                    setPosts(posts => posts.concat(post_info));\n                }\n            }\n        }\n        if (!user) return navigate(\"/\");\n        handlePostDashboard();\n        return () => {\n            setPosts([]);\n        };\n    }, []);\n    return (\n        <div className='home_page'>\n            <div className='left_home'>\n                <Navbar />\n                {posts.map((post, index) =>\n                    <div className='home_posts'\n                    key={post.id}\n                    onClick={() => handlePostClick(index)}>\n                    <PostCard post={post} />\n                </div>\n                )}\n            </div>\n            <div className='map_page'>\n                <Maps posts={posts} selected={selected} />\n            </div>\n\n        </div>\n    )\n}\n\nexport default Home;","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/pages/Login/index.jsx",[],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/pages/Post/index.jsx",["75","76"],"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { TextField, Button, Rating } from \"@mui/material\";\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\nimport { LoadScript, Autocomplete } from \"@react-google-maps/api\";\nimport API from \"api/API\";\nimport \"./Post.css\";\n\nrequire('dotenv').config();\nconst libraries = [\"places\"];\n\nfunction Post(){\n    const user = localStorage.getItem('user');\n    const navigate = useNavigate();\n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [autocomplete, setAutocomplete] = useState(null);\n    const [location, setLocation] = useState([0, 0]);\n    const [description, setDescription] = useState(\"\");\n    const [value, setValue] = useState(0);\n    const [image, setImage] = useState(null);\n    const [title, setTitle] = useState(\"\");\n    const [review, setReview] = useState(\"\");\n    const [restaurant, setRestaurant] = useState(\"\");\n    const onLoad = (autocomplete) => setAutocomplete(autocomplete);\n    const onPlaceChanged = () => {\n      if (autocomplete !== null) {\n        setLocation([autocomplete.getPlace().geometry.location.lat(), \n        autocomplete.getPlace().geometry.location.lng()])\n        setName(autocomplete.getPlace().name);\n        setSearchQuery(autocomplete.getPlace().name);\n        setDescription(autocomplete.getPlace().formatted_address);\n      }\n    };\n    const handleFileUpload = async (e) => {\n      const file = e.target.files[0];\n      const form = new FormData();\n      form.append('image', file)\n      setImage(form);\n    };\n    useEffect(() => {\n    const handleRestaurant = async () => {\n      const restaurants = await API.getRestaurants();\n      let restaurantFound = false;\n      for (let res of restaurants.data){\n        if (res.location.latitude === location[0] && res.location.longitude === location[1]){\n            restaurantFound = true;\n            setRestaurant(res._id);\n        }\n      }\n      if (name && !restaurantFound) {\n      const restaurant_object = {\n        title: name,\n        followers: [],\n        location: {latitude: location[0], longitude: location[1]},\n        description: description\n      }\n      console.log(restaurant_object)\n      const response = await API.createRestaurant(restaurant_object);\n      setRestaurant(response.data._id);\n      }\n    }\n    if (!user) return navigate(\"/\");\n    handleRestaurant();\n  }, [name, location]);\n    const handlePost = async () => {\n        const payload = {\n          username: user,\n          restaurant: restaurant,\n          image: \"\",\n          postTitle: title,\n          review: review,\n          stars: value\n        };\n        console.log(payload)\n        const new_post = await API.createPost(payload);\n        const file_upload = await API.uploadPostImage(image, new_post.data._id);\n        navigate(\"/home\")\n    }\n    \n    return (\n        <div className=\"post_wrapper\">\n          <div className='back_button'>\n          <a href=\"/home\">\n          <ArrowBackIcon sx={{fontSize: \"3em\"}}></ArrowBackIcon>\n          </a>\n          </div>\n            <div className=\"search-group\">\n            <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API} libraries={libraries}>\n            <Autocomplete onLoad={onLoad} onPlaceChanged={onPlaceChanged}>\n              <TextField id=\"outlined-basic\" sx={{ width: \"60%\",\n               backgroundColor: \"#F5F5F5\", fontWeight: 400 }} \n              label=\"Search for restaurant\" variant=\"outlined\"\n              value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)}/>\n            </Autocomplete>\n            </LoadScript>\n          </div>\n          <div className=\"image_upload\">\n            <Button variant=\"contained\" component=\"label\" sx={{ \n            width: \"60%\", \n            lineHeight: \"2.5rem\", \n            backgroundColor: \"#007AFF\",\n            textTransform: \"capitalize\",\n            fontWeight: 700}}\n            startIcon={<UploadFileIcon />}>Upload image\n            <input hidden accept=\"image/*\" multiple type=\"file\" onChange={(e) => handleFileUpload(e)}/>\n            </Button>\n          </div>\n          <div className=\"rating\">\n            <h3>Rating:</h3>\n            <Rating\n                name=\"simple-controlled\"\n                value={value}\n                precision={0.5}\n                sx = {{ fontSize: \"4rem\", color: \"#4285F4\"}}\n                onChange={(event, newValue) => {\n                    setValue(newValue);\n                }}\n            />\n          </div>\n          <div className=\"new_post_title\">\n            <TextField\n            id=\"outlined-basic\"\n            label=\"Post Title\"\n            sx={{ width: \"60%\", marginBottom: \"2%\"}}\n            onChange={e => setTitle(e.target.value)}\n            />\n          </div>\n          <div className=\"review\">\n            <TextField\n            id=\"outlined-multiline-static\"\n            label=\"Review\"\n            multiline\n            rows={4}\n            sx={{ width: \"60%\"}}\n            onChange={e => setReview(e.target.value)}\n            />\n          </div>\n          <Button variant=\"contained\" sx={{ width: \"60%\", \n          lineHeight: \"2.5rem\", \n          fontWeight: 700,\n          textTransform: \"capitalize\",\n          backgroundColor: \"#007AFF\"}\n          } onClick={handlePost}>Post</Button>\n        </div>\n    )\n}\n\nexport default Post;","/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/components/PostCard/index.jsx",[],"/Users/hurricane/Desktop/Coding_Projects/wi23-hack-team-1/client/src/components/Maps/index.jsx",["77"],"import { GoogleMap, LoadScript, Marker, InfoWindow } from \"@react-google-maps/api\"\nimport { useState, useEffect } from \"react\";\n\n\n//does heavy lifting of talking w API\nimport usePlacesAutocomplete, {\n    getGeocode,\n    getLatLng,\n} from \"use-places-autocomplete\";\n\n//display results and read user input\nimport {\n    Combobox,\n    ComboboxInput,\n    ComboboxPopover,\n    ComboboxList,\n    ComboboxOption,\n} from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\"\n\nimport \"./Maps.css\";\n\nrequire('dotenv').config();\nconst libraries = [\"places\"];\nconst api_key = process.env.REACT_APP_GOOGLE_MAPS_API;\n\n\nconst Maps = (props) => {\n    const markers = props.posts;\n    const [selected, setSelected] = useState({\n        // sets latitude and longitude to first post location but defaults to UCSD\n        // if posts are empty\n        lat: 32.8801,\n        lng: -117.2340\n      });\n    const [selectedMarker, setSelectedMarker] = useState(null);\n    const handleMarkerClick = (marker) => {\n        setSelectedMarker(marker); \n    };\n    useEffect(() => {\n        setSelected({lat: markers.length > 0 ? markers[props.selected-1].location.lat : 32.8801,\n            lng: markers.length > 0 ? markers[props.selected-1].location.lng : -117.2340})\n    }, [props.selected]);\n    return (\n    <LoadScript googleMapsApiKey={api_key} libraries={libraries}>\n        <div className=\"places-container\">\n                <PlacesAutocomplete setSelected={setSelected} />\n            </div>\n            <GoogleMap zoom={15} center={{lat: selected.lat, lng:selected.lng}} mapContainerClassName=\"map-container\">\n                {markers && markers.map((marker) => (\n        <Marker\n          key={marker.id}\n          position={marker.location}\n          onClick={() => handleMarkerClick(marker)}\n        >\n            {marker === selectedMarker && (\n            <InfoWindow\n              position={marker.location}\n              onCloseClick={() => setSelectedMarker(null)}\n            >\n              <div>\n                <h3>{marker.restaurant}</h3>\n              </div>\n            </InfoWindow>\n          )}\n        </Marker>\n         ))}\n        \n            </GoogleMap>\n    </LoadScript>\n    )\n};\n\n\n//majority of work done here in the autocomplete function\nconst PlacesAutocomplete = ({ setSelected }) => {\n    const {\n        ready,\n        value,\n        setValue,\n        suggestions: {status, data},\n        clearSuggestions,\n    } = usePlacesAutocomplete();\n\n    const handleSelect = async (address) => {\n        setValue(address, false);\n        clearSuggestions();\n\n        const results = await getGeocode({address});\n        const {lat, lng} = await getLatLng(results[0]);\n        setSelected({lat, lng});\n        \n    }\n\n    return (\n        <Combobox onSelect={handleSelect}>\n            <ComboboxInput \n            value={value} \n            onChange= {(e) => setValue(e.target.value)} \n            disabled={!ready}\n            className=\"combobox-input\" \n            placeholder=\"Search an address\"\n            />\n            <ComboboxPopover>\n                <ComboboxList>\n                    {status === \"OK\" && \n                    data.map(({ place_id, description}) => (\n                        <ComboboxOption key={place_id} value = {description}/>\n                    ))}\n                </ComboboxList>\n            </ComboboxPopover>\n        </Combobox>\n        \n    );\n}\n\n\nexport default Maps;",{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":30,"column":13,"nodeType":"84","messageId":"85","endLine":30,"endColumn":20},{"ruleId":"86","severity":1,"message":"87","line":77,"column":6,"nodeType":"88","endLine":77,"endColumn":8,"suggestions":"89"},{"ruleId":"86","severity":1,"message":"90","line":45,"column":8,"nodeType":"88","endLine":45,"endColumn":10,"suggestions":"91"},{"ruleId":"86","severity":1,"message":"92","line":66,"column":6,"nodeType":"88","endLine":66,"endColumn":22,"suggestions":"93"},{"ruleId":"82","severity":1,"message":"94","line":78,"column":15,"nodeType":"84","messageId":"85","endLine":78,"endColumn":26},{"ruleId":"86","severity":1,"message":"95","line":43,"column":8,"nodeType":"88","endLine":43,"endColumn":24,"suggestions":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'newUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'current_user' and 'navigate'. Either include them or remove the dependency array.","ArrayExpression",["99"],"React Hook useEffect has missing dependencies: 'navigate' and 'user'. Either include them or remove the dependency array.",["100"],"React Hook useEffect has missing dependencies: 'description', 'navigate', and 'user'. Either include them or remove the dependency array.",["101"],"'file_upload' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'markers'. Either include it or remove the dependency array.",["102"],"no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [current_user, navigate]",{"range":"111","text":"112"},"Update the dependencies array to be: [navigate, user]",{"range":"113","text":"114"},"Update the dependencies array to be: [name, location, user, navigate, description]",{"range":"115","text":"116"},"Update the dependencies array to be: [markers, props.selected]",{"range":"117","text":"118"},[2772,2774],"[current_user, navigate]",[1772,1774],"[navigate, user]",[2514,2530],"[name, location, user, navigate, description]",[1247,1263],"[markers, props.selected]"]